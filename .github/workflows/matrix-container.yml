# This workflow will run commands in a container on multiple jobs

name: matrix-container
run-name: matix-container - count - ${{ inputs.count }} - ${{inputs.run_name}}

on:
  workflow_dispatch:    
    inputs:
      count:
        description: 'Number of jobs to run'
        required: true
        type: string
        default: '20'
      gen_file_query:
        required: true
        type: string
        default: source=windows-2022-10.0.20348.0 --include import_funcs=CreateFile
      run_name:
        required: false
        type: string
      
  push:
    branches: [ "main" ]

  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 11 * * 1,4'

env:
  # how many runners
  default-count: 20
  # how long the lists are (potentially skipping valid files)
  default-limit: 5


jobs:

  generate-matrix:    
    runs-on: ubuntu-latest    
    outputs:
      count: ${{ steps.getcount.outputs.countenv }}
    steps:      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Count
        id: getcount          
        run: |                    
          echo Count set to: "${{inputs.count}}"
          [ -n "${{inputs.count}}" ] && echo "countenv=$(python -c 'print([count for count in range(0,${{inputs.count}})])')" >> "$GITHUB_OUTPUT"
          echo Count set to: "${{inputs.count}}"
          # default 12 jobs
          [ -z "${{inputs.count}}" ] && echo "countenv=$(python -c 'print([count for count in range(0,${{env.default-count}})])')" >> "$GITHUB_OUTPUT"
          echo This command needs to return success despite the line above failing wiht -z! Echo will return success. Done.
        shell: bash

  build_file_lists:
    needs: generate-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip install -r gen-requirements.txt           
          pip freeze
          python -m cvedata.download --data-only
      - name: Generate File Lists
        run: |          
          # worfklow_dispatch
          [ -n "${{inputs.gen_file_query}}" ] && python gen_files.py --count ${{inputs.count}} ${{inputs.gen_file_query}}
          # default run
          [ -z "${{inputs.gen_file_query}}" ] && python gen_files.py --count ${{env.default-count}} --include source=windows-2022-10.0.20348.0 --include import_funcs=CreateFile --limit-list ${{env.default-limit}}
          echo This command needs to return success despite the line above failing wiht -z! Echo will return success. Done.
      - uses: actions/upload-artifact@v4
        with:
          name: gen_files
          path: gen_files
          retention-days: 1
          
  workflow-runner:
    #needs: [generate-matrix, build_file_lists,download-files]
    needs: [generate-matrix, build_file_lists]
    runs-on: ubuntu-latest
    # container:
    #   image: ghcr.io/clearbluejar/ghidrecomp:latest
    #   env:
    #     GHIDRA_INSTALL_DIR: "/ghidra"
    strategy:
      fail-fast: false
      matrix:        
        counts: ${{fromJson(needs.generate-matrix.outputs.count)}}

    steps:
      - name: Collect Workflow Telemetry
        uses: runforesight/workflow-telemetry-action@v1
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'        
      - name: Download gen_files
        uses: actions/download-artifact@v4      
        with:
          name: gen_files
          path: gen_files
      # - name: Restore Ghidra Project Cache
      #   uses: actions/cache/restore@v3
      #   with: 
      #     path: |
      #       .ghidra_projects
      #     key: ghidra-projects-cache-${{ hashFiles('gen_files/meta/args.json') }}
      - name: Download files
        run: |
          pip install -r dl-requirements.txt
          # worfklow_dispatch
          [ -n "${{inputs.gen_file_query}}" ] && python get_files.py --id ${{ matrix.counts }}
          # default run
          [ -z "${{inputs.gen_file_query}}" ] && python get_files.py --id ${{ matrix.counts }}
          echo hooray
      - name: Upload bins
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bins-${{ matrix.counts }}
          path: bins
          retention-days: 5        
     
      # - name: Echo Matrix
      #   run: |
      #     echo 
      #     ls gen_files
      #     ls bins
      #     jq -r 'to_entries[] | "\(.key)=\(.value)"' bins/meta/dl_files${{ matrix.counts }}.json           
    # - name: Run command in image
    #   run: |        
    #     whoami
    #     su vscode
    #     whoami
    #     python3 -m venv .env
    #     source .env/bin/activate
    #     pip install ghidrecomp
    #     cd /tmp
    #     ls /ghidra
    #     ghidrecomp -h
    #     ghidrecomp ${{ matrix.bins }}  
    #   shell: bash 
      - name: Run make ci-build in dev container 
        uses: devcontainers/ci@v0.3
        with:    
          # [Optional] If you have a separate workflow like the one above
          # to pre-build your container image, you can reference it here
          # to speed up your application build workflows as well!
          cacheFrom: ghcr.io/clearbluejar/ghidrecomp:latest
          push: never
          runCmd: |  
            ls -rota     
            source .env/bin/activate
            # install plugins before use
            python -m pyhidra.install_plugins           
            python run_decomp.py --id ${{ matrix.counts }} --proc-limit 3

      # - name: Cache Ghidra Projects
      #   uses: actions/cache/save@v3
      #   with: 
      #     path: |
      #       .ghidra_projects
      #     key: ghidra-projects-cache-${{ matrix.counts }}-${{ hashFiles('gen_files/meta/args.json') }}
      # - name: Zip decomps
      #   run:  |
      #     zip -qq -r decompilations${{ matrix.counts }}.zip decompilations/
      #     unzip -l decompilations${{ matrix.counts }}.zip

      - name: Tar GZ decomps
        run:  |
          tar -zcf decompilations${{ matrix.counts }}.tar.gz ghidrecomps/bins/* ghidrecomps/bsim-xmls
          # tar -ztvf decompilations${{ matrix.counts }}.tar.gz          
          echo '### Hello world! ' >> $GITHUB_STEP_SUMMARY
          echo $(du -h decompilations${{ matrix.counts }}.tar.gz) >> $GITHUB_STEP_SUMMARY

      - name: Upload decompilations
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: runner_decomps-${{ matrix.counts }}
          path: decompilations*.tar.gz
          retention-days: 5
      # - name: Upload projects
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: projects-${{ matrix.counts }}
      #     path: .ghidra_projects/*
      #     retention-days: 5          

      - name: Upload decomp_logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: decomp_logs-${{ matrix.counts }}
          path: decomp_logs
          retention-days: 5   
            
          
  update-artifacts:
    needs: workflow-runner
    runs-on: ubuntu-latest

    steps:
      - name: Download all runner artifacts 
        uses: actions/download-artifact@v4
        with:
          path: runner_decomps      
      - name: Display structure of downloaded files
        run: ls -R runner_decomps

      - name: upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all_things
          path: runner_decomps          
      # - name: Download projects          
      #   uses: actions/download-artifact@master      
      #   with:
      #     name: projects
      #     path: .ghidra_projects         
      # - name: Download gen_files
      #   uses: actions/download-artifact@master      
      #   with:
      #     name: gen_files
      #     path: gen_files           
      # - name: combine all zips
      #   run: |
      #     mkdir decompilations
      #     for x in runner_decomps/*.zip; do unzip -qq -d decompilations -o -u $x ; done
      #     echo starting zipping $(date) 
      #     zip -qq -r decompilations.zip decompilations
      #     echo total file count: $(unzip -l decompilations.zip | wc -l)
      - name: combine all tar.gz
        run: |
          mkdir decompilations
          for x in runner_decomps/decomp*.tar.gz; do tar xzf $x -C decompilations ; done
          echo starting zipping $(date) 
          tar czf decompilations.tar.gz decompilations
          echo total file count: $(tar -ztvf decompilations.tar.gz | wc -l)
      # - name: Upload decompilations          
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: decompilations
      #     path: decompilations.zip
      #     retention-days: 5          
      # - name: Cache Ghidra Projects
      #   uses: actions/cache/save@v3
      #   with: 
      #     path: |
      #       .ghidra_projects
      #     key: ghidra-projects-cache-${{ hashFiles('gen_files/meta/args.json') }}
      - name: Upload decompilations          
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: decompilations
          path: decompilations.tar.gz
          retention-days: 5      


    # clean up decompilations

